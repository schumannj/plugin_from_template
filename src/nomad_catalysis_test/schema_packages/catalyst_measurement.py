#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from nomad.datamodel.metainfo.basesections import CompositeSystem
from nomad.datamodel.data import EntryData
from typing import (
    TYPE_CHECKING,
)
from nomad.metainfo import (
    Package,
    Quantity,
    SubSection,
    Section,
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
)
if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = Package(name='A schema for catalyst tests')


class Samples(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        basesections="nomad.datamodel.metainfo.basesections.CompositeSystemReference",)
    name = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    lab_id = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    reference = Quantity(
        type=nomad.datamodel.metainfo.basesections.CompositeSystem,
        a_eln={
            "component": "ReferenceEditQuantity",
            "label": "Composite System Reference"
        },
    )


class CatalystTests(CompositeSystem, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    data_file = Quantity(
        type=str,
        a_eln={
            "component": "FileEditQuantity"
        },
    )
    reaction_class = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    location = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    reaction_name = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    experimenter = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    samples = SubSection(
        section_def=Samples,
        repeats=True,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `CatalystTests` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


m_package.__init_metainfo__()
